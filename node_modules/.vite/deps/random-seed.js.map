{
  "version": 3,
  "sources": ["../../../../node_modules/json-stringify-safe/stringify.js", "../../../../node_modules/random-seed/index.js"],
  "sourcesContent": ["exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n", "/*\n * random-seed\n * https://github.com/skratchdot/random-seed\n *\n * This code was originally written by Steve Gibson and can be found here:\n *\n * https://www.grc.com/otg/uheprng.htm\n *\n * It was slightly modified for use in node, to pass jshint, and a few additional\n * helper functions were added.\n *\n * Copyright (c) 2013 skratchdot\n * Dual Licensed under the MIT license and the original GRC copyright/license\n * included below.\n */\n/*\t============================================================================\n\t\t\t\t\t\t\t\t\tGibson Research Corporation\n\t\t\t\tUHEPRNG - Ultra High Entropy Pseudo-Random Number Generator\n\t============================================================================\n\tLICENSE AND COPYRIGHT:  THIS CODE IS HEREBY RELEASED INTO THE PUBLIC DOMAIN\n\tGibson Research Corporation releases and disclaims ALL RIGHTS AND TITLE IN\n\tTHIS CODE OR ANY DERIVATIVES. Anyone may be freely use it for any purpose.\n\t============================================================================\n\tThis is GRC's cryptographically strong PRNG (pseudo-random number generator)\n\tfor JavaScript. It is driven by 1536 bits of entropy, stored in an array of\n\t48, 32-bit JavaScript variables.  Since many applications of this generator,\n\tincluding ours with the \"Off The Grid\" Latin Square generator, may require\n\tthe deteriministic re-generation of a sequence of PRNs, this PRNG's initial\n\tentropic state can be read and written as a static whole, and incrementally\n\tevolved by pouring new source entropy into the generator's internal state.\n\t----------------------------------------------------------------------------\n\tENDLESS THANKS are due Johannes Baagoe for his careful development of highly\n\trobust JavaScript implementations of JS PRNGs.  This work was based upon his\n\tJavaScript \"Alea\" PRNG which is based upon the extremely robust Multiply-\n\tWith-Carry (MWC) PRNG invented by George Marsaglia. MWC Algorithm References:\n\thttp://www.GRC.com/otg/Marsaglia_PRNGs.pdf\n\thttp://www.GRC.com/otg/Marsaglia_MWC_Generators.pdf\n\t----------------------------------------------------------------------------\n\tThe quality of this algorithm's pseudo-random numbers have been verified by\n\tmultiple independent researchers. It handily passes the fermilab.ch tests as\n\twell as the \"diehard\" and \"dieharder\" test suites.  For individuals wishing\n\tto further verify the quality of this algorithm's pseudo-random numbers, a\n\t256-megabyte file of this algorithm's output may be downloaded from GRC.com,\n\tand a Microsoft Windows scripting host (WSH) version of this algorithm may be\n\tdownloaded and run from the Windows command prompt to generate unique files\n\tof any size:\n\tThe Fermilab \"ENT\" tests: http://fourmilab.ch/random/\n\tThe 256-megabyte sample PRN file at GRC: https://www.GRC.com/otg/uheprng.bin\n\tThe Windows scripting host version: https://www.GRC.com/otg/wsh-uheprng.js\n\t----------------------------------------------------------------------------\n\tQualifying MWC multipliers are: 187884, 686118, 898134, 1104375, 1250205,\n\t1460910 and 1768863. (We use the largest one that's < 2^21)\n\t============================================================================ */\n'use strict';\nvar stringify = require('json-stringify-safe');\n\n/*\t============================================================================\nThis is based upon Johannes Baagoe's carefully designed and efficient hash\nfunction for use with JavaScript.  It has a proven \"avalanche\" effect such\nthat every bit of the input affects every bit of the output 50% of the time,\nwhich is good.\tSee: http://baagoe.com/en/RandomMusings/hash/avalanche.xhtml\n============================================================================\n*/\nvar Mash = function () {\n\tvar n = 0xefc8249d;\n\tvar mash = function (data) {\n\t\tif (data) {\n\t\t\tdata = data.toString();\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tn += data.charCodeAt(i);\n\t\t\t\tvar h = 0.02519603282416938 * n;\n\t\t\t\tn = h >>> 0;\n\t\t\t\th -= n;\n\t\t\t\th *= n;\n\t\t\t\tn = h >>> 0;\n\t\t\t\th -= n;\n\t\t\t\tn += h * 0x100000000; // 2^32\n\t\t\t}\n\t\t\treturn (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n\t\t} else {\n\t\t\tn = 0xefc8249d;\n\t\t}\n\t};\n\treturn mash;\n};\n\nvar uheprng = function (seed) {\n\treturn (function () {\n\t\tvar o = 48; // set the 'order' number of ENTROPY-holding 32-bit values\n\t\tvar c = 1; // init the 'carry' used by the multiply-with-carry (MWC) algorithm\n\t\tvar p = o; // init the 'phase' (max-1) of the intermediate variable pointer\n\t\tvar s = new Array(o); // declare our intermediate variables array\n\t\tvar i; // general purpose local\n\t\tvar j; // general purpose local\n\t\tvar k = 0; // general purpose local\n\n\t\t// when our \"uheprng\" is initially invoked our PRNG state is initialized from the\n\t\t// browser's own local PRNG. This is okay since although its generator might not\n\t\t// be wonderful, it's useful for establishing large startup entropy for our usage.\n\t\tvar mash = new Mash(); // get a pointer to our high-performance \"Mash\" hash\n\n\t\t// fill the array with initial mash hash values\n\t\tfor (i = 0; i < o; i++) {\n\t\t\ts[i] = mash(Math.random());\n\t\t}\n\n\t\t// this PRIVATE (internal access only) function is the heart of the multiply-with-carry\n\t\t// (MWC) PRNG algorithm. When called it returns a pseudo-random number in the form of a\n\t\t// 32-bit JavaScript fraction (0.0 to <1.0) it is a PRIVATE function used by the default\n\t\t// [0-1] return function, and by the random 'string(n)' function which returns 'n'\n\t\t// characters from 33 to 126.\n\t\tvar rawprng = function () {\n\t\t\tif (++p >= o) {\n\t\t\t\tp = 0;\n\t\t\t}\n\t\t\tvar t = 1768863 * s[p] + c * 2.3283064365386963e-10; // 2^-32\n\t\t\treturn s[p] = t - (c = t | 0);\n\t\t};\n\n\t\t// this EXPORTED function is the default function returned by this library.\n\t\t// The values returned are integers in the range from 0 to range-1. We first\n\t\t// obtain two 32-bit fractions (from rawprng) to synthesize a single high\n\t\t// resolution 53-bit prng (0 to <1), then we multiply this by the caller's\n\t\t// \"range\" param and take the \"floor\" to return a equally probable integer.\n\t\tvar random = function (range) {\n\t\t\treturn Math.floor(range * (rawprng() + (rawprng() * 0x200000 | 0) * 1.1102230246251565e-16)); // 2^-53\n\t\t};\n\n\t\t// this EXPORTED function 'string(n)' returns a pseudo-random string of\n\t\t// 'n' printable characters ranging from chr(33) to chr(126) inclusive.\n\t\trandom.string = function (count) {\n\t\t\tvar i;\n\t\t\tvar s = '';\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\ts += String.fromCharCode(33 + random(94));\n\t\t\t}\n\t\t\treturn s;\n\t\t};\n\n\t\t// this PRIVATE \"hash\" function is used to evolve the generator's internal\n\t\t// entropy state. It is also called by the EXPORTED addEntropy() function\n\t\t// which is used to pour entropy into the PRNG.\n\t\tvar hash = function () {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tfor (i = 0; i < args.length; i++) {\n\t\t\t\tfor (j = 0; j < o; j++) {\n\t\t\t\t\ts[j] -= mash(args[i]);\n\t\t\t\t\tif (s[j] < 0) {\n\t\t\t\t\t\ts[j] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// this EXPORTED \"clean string\" function removes leading and trailing spaces and non-printing\n\t\t// control characters, including any embedded carriage-return (CR) and line-feed (LF) characters,\n\t\t// from any string it is handed. this is also used by the 'hashstring' function (below) to help\n\t\t// users always obtain the same EFFECTIVE uheprng seeding key.\n\t\trandom.cleanString = function (inStr) {\n\t\t\tinStr = inStr.replace(/(^\\s*)|(\\s*$)/gi, ''); // remove any/all leading spaces\n\t\t\tinStr = inStr.replace(/[\\x00-\\x1F]/gi, ''); // remove any/all control characters\n\t\t\tinStr = inStr.replace(/\\n /, '\\n'); // remove any/all trailing spaces\n\t\t\treturn inStr; // return the cleaned up result\n\t\t};\n\n\t\t// this EXPORTED \"hash string\" function hashes the provided character string after first removing\n\t\t// any leading or trailing spaces and ignoring any embedded carriage returns (CR) or Line Feeds (LF)\n\t\trandom.hashString = function (inStr) {\n\t\t\tinStr = random.cleanString(inStr);\n\t\t\tmash(inStr); // use the string to evolve the 'mash' state\n\t\t\tfor (i = 0; i < inStr.length; i++) { // scan through the characters in our string\n\t\t\t\tk = inStr.charCodeAt(i); // get the character code at the location\n\t\t\t\tfor (j = 0; j < o; j++) { //\t\"mash\" it into the UHEPRNG state\n\t\t\t\t\ts[j] -= mash(k);\n\t\t\t\t\tif (s[j] < 0) {\n\t\t\t\t\t\ts[j] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// this EXPORTED function allows you to seed the random generator.\n\t\trandom.seed = function (seed) {\n\t\t\tif (typeof seed === 'undefined' || seed === null) {\n\t\t\t\tseed = Math.random();\n\t\t\t}\n\t\t\tif (typeof seed !== 'string') {\n\t\t\t\tseed = stringify(seed, function (key, value) {\n\t\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\t\treturn (value).toString();\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t}\n\t\t\trandom.initState();\n\t\t\trandom.hashString(seed);\n\t\t};\n\n\t\t// this handy exported function is used to add entropy to our uheprng at any time\n\t\trandom.addEntropy = function ( /* accept zero or more arguments */ ) {\n\t\t\tvar args = [];\n\t\t\tfor (i = 0; i < arguments.length; i++) {\n\t\t\t\targs.push(arguments[i]);\n\t\t\t}\n\t\t\thash((k++) + (new Date().getTime()) + args.join('') + Math.random());\n\t\t};\n\n\t\t// if we want to provide a deterministic startup context for our PRNG,\n\t\t// but without directly setting the internal state variables, this allows\n\t\t// us to initialize the mash hash and PRNG's internal state before providing\n\t\t// some hashing input\n\t\trandom.initState = function () {\n\t\t\tmash(); // pass a null arg to force mash hash to init\n\t\t\tfor (i = 0; i < o; i++) {\n\t\t\t\ts[i] = mash(' '); // fill the array with initial mash hash values\n\t\t\t}\n\t\t\tc = 1; // init our multiply-with-carry carry\n\t\t\tp = o; // init our phase\n\t\t};\n\n\t\t// we use this (optional) exported function to signal the JavaScript interpreter\n\t\t// that we're finished using the \"Mash\" hash function so that it can free up the\n\t\t// local \"instance variables\" is will have been maintaining.  It's not strictly\n\t\t// necessary, of course, but it's good JavaScript citizenship.\n\t\trandom.done = function () {\n\t\t\tmash = null;\n\t\t};\n\n\t\t// if we called \"uheprng\" with a seed value, then execute random.seed() before returning\n\t\tif (typeof seed !== 'undefined') {\n\t\t\trandom.seed(seed);\n\t\t}\n\n\t\t// Returns a random integer between 0 (inclusive) and range (exclusive)\n\t\trandom.range = function (range) {\n\t\t\treturn random(range);\n\t\t};\n\n\t\t// Returns a random float between 0 (inclusive) and 1 (exclusive)\n\t\trandom.random = function () {\n\t\t\treturn random(Number.MAX_VALUE - 1) / Number.MAX_VALUE;\n\t\t};\n\n\t\t// Returns a random float between min (inclusive) and max (exclusive)\n\t\trandom.floatBetween = function (min, max) {\n\t\t\treturn random.random() * (max - min) + min;\n\t\t};\n\n\t\t// Returns a random integer between min (inclusive) and max (inclusive)\n\t\trandom.intBetween = function (min, max) {\n\t\t\treturn Math.floor(random.random() * (max - min + 1)) + min;\n\t\t};\n\n\t\t// when our main outer \"uheprng\" function is called, after setting up our\n\t\t// initial variables and entropic state, we return an \"instance pointer\"\n\t\t// to the internal anonymous function which can then be used to access\n\t\t// the uheprng's various exported functions.  As with the \".done\" function\n\t\t// above, we should set the returned value to 'null' once we're finished\n\t\t// using any of these functions.\n\t\treturn random;\n\t}());\n};\n\n// Modification for use in node:\nuheprng.create = function (seed) {\n\treturn new uheprng(seed);\n};\nmodule.exports = uheprng;\n"],
  "mappings": "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",
  "names": ["i", "s", "seed"]
}
